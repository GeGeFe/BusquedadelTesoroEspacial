-- Title: Busqueda del tesoro espacial
-- Autor: Gabriel Gioiosa Farina
-- Ideas incorporadas de: Lucho Ferrer y Leonardo GF
-- Licencia: GPL3

function cerca()
   distancia = sel:getposition():distanceto(observador:getposition())
   distpradio = distancia * 100 / sel:radius()
-- Distancia porcentual a la que se considerará que se llegó al objetivo seleccionado según el tipo al que corresponde.
   if sel:type() == "planet" then
      limite = 550
   elseif sel:type() == "star" then
      limite = 10000
   else
      limite = 600
   end
   return (distpradio <= limite) and (distpradio > 100) 
end

function selecciona_pista()
   totalpistas = #recorrido[paso].pistas -- Aquí puedo confiar en que si o si está declarada pistas con al menos un valor.
   npista = math.random(1, totalpistas)
end

function selecciona_fallo()
   if recorrido[paso].fallos then
      nfallo = math.random(1, #recorrido[paso].fallos)
   else
      nfallo = nil
   end
end

-- Efectos especiales para el final

function orbitar()
   duration = final.pausa
   orbitangle = math.rad(360.0)
   axis_vector = celestia:newvector(0,1,0)
   orbitsteps = 30 * duration
   orbitsteptime = 0.75*duration/orbitsteps
   rot = celestia:newrotation(axis_vector, orbitangle/orbitsteps)
   for i = 1, orbitsteps do
      observador:orbit(rot)
      wait(orbitsteptime)
   end
end

function alejarse()
   observador:gotodistance(sel, sel:radius() * 100, final.pausa)
end

function fuegosartificiales()
   for i = 1, final.pausa / 3, 1 do
      celestia:overlay ( 1, 0, 0, 0.7, pathname .. "/imagenes/fuegosartificiales1.png" )
      wait(0.5)
      celestia:overlay ( 1, -0.5, 0, 0.7, pathname .. "/imagenes/fuegosartificiales2.png" )
      wait(1)
      celestia:overlay ( 2, 0.5, -0.5, 0.7, pathname .. "/imagenes/fuegosartificiales3.png" )
      wait(0.5)
      celestia:overlay ( 1, 0.5, 0.5, 0.7, pathname .. "/imagenes/fuegosartificiales4.png" )
      wait(1)
   end
end

-- Fin de efectos especiales para el final

function MostrarPistaActual()
   if not noimagen then
      celestia:overlay ( 1.0, -0.8, -0.5, 1, pathname .. "imagenes/" .. recorrido[paso].pistas[npista].personaje )
   end
   celestia:print(recorrido[paso].pistas[npista].texto, 1.0, -1, -1, 2, 4)
end

function ObjetivoActualAlcanzado()
   celestia:print(interlocutor .. ":\n" .. recorrido[paso].felicitacion, 10.0, 0, -1, 2, 4)
   wait(10.0)

end

function SiguienteObjetivo()
   objetivoanterior = recorrido[paso].objetivo
   paso = paso + 1
   if paso < #recorrido then selecciona_pista() end
end

function MostrarFallo()
   if nfallo then
      celestia:print(interlocutor .. ":\n" .. recorrido[paso].fallos[nfallo], 1.0, 0, -1, 2, 4)
      wait(1.0)
   end
end

function NombrealAzar()
   interlocutor = nombres[math.random(1, #nombres)]
end

function play(sonido, duracion)
   if not sinsonido then
      archivo = pathname .. "sonidos/" .. sonido
      respuestasistema = os.execute("ffplay \"" .. archivo .. "\" -nodisp -autoexit -t " .. duracion .. "&")
   end
end

-- Semilla para que random sea más aleatorio.
math.randomseed(celestia:gettime())

-- Valores por defecto

sinsonido = true
noimagen = false
ubicacioninicial = "cel://Follow/Sol:Earth/2024-06-17T19:32:20.64205Z?x=6hfcEn0+Kw&y=/ILPRBAo/////////////w&z=8JjHZzd1+v7//////////w&ow=0.08184984&ox=-0.009679023&oy=-0.99659735&oz=0.0008014465&select=Sol:Earth&fov=36.87419&ts=1&ltd=0&p=0&rf=71095959&nrf=255&lm=2048&tsrc=0&ver=3"

-- Fin de valores por defecto

observador = celestia:getobserver()
pathname = celestia:getscriptpath():match("(.*[/\\])")

celestia:requestsystemaccess() -- Se solicita acceso al sistema.
wait(0)

-- Cargo nombres para personajes secundarios.
dofile(pathname .. "nombres.lua")

-- Se carga el contenido.
contenido = os.getenv("contenidocelestia")
wait(0)
if contenido == "" then
   dofile(pathname .. "contenidoprueba.lua") -- Reemplazar lo que está entre comillas por el archivo de contenido correspondiente.
else
   dofile(pathname .. contenido)
end

celestia:seturl(ubicacioninicial, observador) -- Siempre debe haber una ubicacion inicial para comenzar el juego desde ahí.

-- Introducción
if not noimagen then
   celestia:overlay ( introduccion.pausa, 0, 0.7, 1, pathname .. "imagenes/" .. introduccion.imagen )
end
celestia:print(introduccion.texto, introduccion.pausa, -1, 0, 2, 4)
if not sinsonido then
   play(introduccion.sonido, introduccion.pausa)
end
wait(introduccion.pausa)
-- Fin de introducción

-- Comienza el recorrido
paso = 1
npista = 1
memovi = false
objetivoanterior = objetodeinicio
--celestia:select(objetivoanterior)

while paso < #recorrido + 1 do
   sel = celestia:getselection()
   if observador:travelling() then -- ¿Travelling?
      memovi = true
      wait(0)
   else -- No se está viajando
      if memovi then
         selecciona_pista() -- Como memovi elijo nuevamente una pista al azar de las disponibles para el objetivo actual.
         selecciona_fallo() -- Como memovi también elijo otro fallo al azar.
         NombrealAzar() -- Como memovi elijo interlocutor al azar.
         memovi = false
      end
      if sel then -- ¿Hay algo seleccionado?
         if cerca() then -- Como algo está seleccionado se comprueva distancia a eso seleccionado.
            if sel:localname() == objetivoanterior then -- ¿El objetivo seleccionado es el anterior?
               MostrarPistaActual() -- Nos comunicamos con alguien del punto de partida y vemos la piasta que nos dá.
            else -- El objeto seleccionado no es el objetivo anterior.
               if sel:localname() == recorrido[paso].objetivo then -- ¿Llegamos al objetivo?
                  ObjetivoActualAlcanzado() -- Alcanzamos el objetivo actual.
                  SiguienteObjetivo() -- Actualizamos estado del recorrido.
               else
                  MostrarFallo() -- Llegamos un objeto que no es el objetivo.
               end
            end
         else
            wait(0)
         end
      else -- 
         wait(0)
      end
   end
   wait(0)
end

-- Final
if not noimagen then
   celestia:overlay ( final.pausa, 0, -0.7, 1, pathname .. "imagenes/" .. final.imagen )
end
celestia:print(final.texto, final.pausa, -1, 0, 2, 4)

if final.efecto == "orbitar" then
   orbitar()
   wait(final.pausa)
elseif final.efecto == "fuegosartificiales" then
   wait(1)
   fuegosartificiales()
elseif final.efecto == "alejarse" then
   alejarse()
   wait(final.pausa)
end
