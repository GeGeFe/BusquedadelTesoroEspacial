-- Title: Busqueda del tesoro espacial
-- Autor: Gabriel Gioiosa Farina
-- Ideas incorporadas de: Lucho Ferrer y Leonardo GF
-- Licencia: GPL3

function findelgo()
   distancia = sel:getposition():distanceto(observador:getposition())
   distpradio = distancia * 100 / sel:radius()
-- Distancia porcentual a la que se considerará que se llegó al objetivo seleccionado según el tipo al que corresponde.
   if sel:type() == "planet" then
      distllegada = 550
   elseif sel:type() == "star" then
      distllegada = 10000
   else
      distllegada = 600
   end
   return distpradio <= distllegada 
end

function selecciona_pista()
   totalpistas = #recorrido[paso].pistas -- Aquí puedo confiar en que si o si está declarada pistas con al menos un valor.
   npista = math.random(1, totalpistas)
end

function orbitar()
   duration = 20.0
   orbitangle = math.rad(360.0)
   axis_vector = celestia:newvector(0,1,0)
-- Split up the orbit in 30 steps per second and determine the orbit steptime for each single step.
-- The factor 0.75 is an estimate and may depend on the speed of your computer.
   orbitsteps = 30 * duration
   orbitsteptime = 0.75*duration/orbitsteps
-- Create new rotation object of split up orbit angle around the specified axis.
   rot = celestia:newrotation(axis_vector, orbitangle/orbitsteps)
-- Actually execute the orbit.
   for i = 1, orbitsteps do
      observador:orbit(rot)
      wait(orbitsteptime)
   end
end

-- Semilla para que random sea más aleatorio.
math.randomseed(celestia:gettime())

observador = celestia:getobserver()

pathname = celestia:getscriptpath():match("(.*[/\\])")

-- Aquí se indica a Celestia que muestre las órbitas. Puede comentarse la linea o reemplazar true por false si no se quieren mostrar las órbitas.
celestia:setrenderflags{orbits = false}

-- Se carga el contenido.
dofile(pathname .. "contenido02.lua")

if ubicacioninicial then celestia:seturl(ubicacioninicial, observador) end

-- Introducción
celestia:overlay ( introduccion.pausa, 0, 0.7, 1, pathname .. "imagenes/" .. introduccion.imagen )
celestia:print(introduccion.texto, introduccion.pausa, -1, 0, 2, 4)
wait(introduccion.pausa)
-- Fin de introducción

-- Comienza el recorrido
paso = 1
npista = 1

while paso < #recorrido + 1 do
   sel = celestia:getselection()
   if findelgo() then 
--    Se llegó a algún lado
      if sel:localname() == recorrido[paso].objetivo then
--       Coincide el objetivo con el lugar al que se llegó
         celestia:print(recorrido[paso].felicitacion, 10.0, 0, -1, 2, 4)
         wait(10.0)
         paso = paso + 1
         if paso < #recorrido then selecciona_pista() end
         celestia:select("") -- Deselecciono objeto para que no se confunda con el siguiente objetivo.
      else
--       Se llegó a otro lugar
         if recorrido[paso].fallos then
            celestia:print(recorrido[paso].fallos[math.random(1, #recorrido[paso].fallos)], 5.0, 0, -1, 2, 4)
            wait(5.0)
            selecciona_pista()
         end
      end
   else
--    Todavía no se llegó a un objetivo
      if observador:travelling() then
         selecciona_pista()
      else
         celestia:overlay ( 1.0, -0.8, -0.5, 1, pathname .. "imagenes/" .. recorrido[paso].pistas[npista].personaje ) -- Me gusta más imagenes que images. Soy argentino y hablo español, que tanto inglés.
         celestia:print(recorrido[paso].pistas[npista].texto, 1.0, -1, -1, 2, 4)
      end
   end
   wait(0)
end

-- Final
celestia:overlay ( final.pausa, 0, -0.7, 1, pathname .. "imagenes/" .. final.imagen )
celestia:print(final.texto, final.pausa, -1, 0, 2, 4)
orbitar()
wait(final.pausa)
